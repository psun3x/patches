From d0e55f11c24a9aa30e5ad978056122038d8e6a8c Mon Sep 17 00:00:00 2001
From: Peng Sun <peng.p.sun@intel.com>
Date: Wed, 10 Mar 2021 14:13:02 +0800
Subject: [PATCH v4] DM: gvt: Identical mapping for GPU DSM refine to support
 EHL/TGL

Windows graphic driver obtains DSM address from in-BAR mmio register
which has passthroughed. Not like the other platforms obtained from
pci configure space register which has virtualized. GPU GuC must use
WOPCM in DSM, besides, Windows OS wants to manage DSM also. These two
reason force acrn has to keep identical mapping to avoid trap mmio
BAR to do the emulation.

To keep simple, this patch reserve a big address range hole for DSM
& opregion of gpu in vE820 table, this will cause memory waste here.
In the near future, we need refine the entire vE820 logic as it is
hard to maintained due to many reserved regions have introduced in
recently.

Signed-off-by: Peng Sun <peng.p.sun@intel.com>
---
 devicemodel/core/sw_load_common.c | 66 ++++++++++---------------------
 devicemodel/hw/pci/core.c         |  2 +-
 devicemodel/hw/pci/passthrough.c  | 32 ++++-----------
 devicemodel/include/pci_core.h    |  2 +-
 devicemodel/include/pcireg.h      |  2 +-
 devicemodel/include/sw_load.h     |  4 +-
 6 files changed, 32 insertions(+), 76 deletions(-)

diff --git a/devicemodel/core/sw_load_common.c b/devicemodel/core/sw_load_common.c
index b6bdd39d4..1328f640c 100644
--- a/devicemodel/core/sw_load_common.c
+++ b/devicemodel/core/sw_load_common.c
@@ -39,9 +39,12 @@
 int with_bootargs;
 static char bootargs[BOOT_ARG_LEN];
 
+extern uint32_t gpu_opregion_gpa;
+
 /*
  * Default e820 mem map:
  *
+ * there is reserved memory hole for device memory
  * there is reserved memory hole for PCI hole and APIC etc
  * so the memory layout could be separated into lowmem & highmem.
  * - if request memory size <= ctx->lowmem_limit, then there is only
@@ -53,21 +56,15 @@ static char bootargs[BOOT_ARG_LEN];
  *
  *             Begin    Limit        Type            Length
  * 0:              0 -  0xA0000      RAM             0xA0000
- * 1:       0x100000 -  lowmem part1 RAM             0x0
- * 2:   gpu_rsvd_bot -  gpu_rsvd_top (reserved)      0x4004000
- * 3:   lowmem part2 -  0x7f800000   (reserved)      0x0
- * 4:   SW SRAM_bot  -  0x80000000   (reserved)      SOFTWARE_SRAM_MAX_SIZE
+ * 1:       0x100000 -  lowmem       RAM             0x0
+ * 2:         lowmem -  0x80000000   DEVICE MEM      0x0
+ * 3:     0xE0000000 -  0x100000000  MCFG, MMIO      512MB
+ * 4:    0x140000000 -  highmem      RAM             highmem - 5GB
  * 5:     0xDB000000 -  0xDF000000   (reserved)      64MB
  * 6:     0xDF000000 -  0xE0000000   (reserved)      16MB
- * 7:     0xE0000000 -  0x100000000  MCFG, MMIO      512MB
- * 8:    0x140000000 -  highmem      RAM             highmem - 5GB
  *
  * FIXME: Do we need to reserve DSM and OPREGION for GVTD here.
  */
-
-#define GPU_DSM_OPREGION_BASE_GPA 0x3B800000
-#define GPU_DSM_OPREGION_SIZE  0x4004000
-
 const struct e820_entry e820_default_entries[NUM_E820_ENTRIES] = {
 	{	/* 0 to video memory */
 		.baseaddr = 0x00000000,
@@ -75,36 +72,18 @@ const struct e820_entry e820_default_entries[NUM_E820_ENTRIES] = {
 		.type     = E820_TYPE_RAM
 	},
 
-	{	/* 1MB to lowmem part1 */
+	{	/* 1MB to lowmem */
 		.baseaddr = 1 * MB,
 		.length   = 0x0,
 		.type     = E820_TYPE_RAM
 	},
 
-	{	/* TGL GPU DSM & OpRegion area */
-		.baseaddr = GPU_DSM_OPREGION_BASE_GPA,
-		.length   = GPU_DSM_OPREGION_SIZE,
-		.type     = E820_TYPE_RESERVED
-	},
-
-	{	/* lowmem part2 to lowmem_limit */
-		.baseaddr = GPU_DSM_OPREGION_BASE_GPA + GPU_DSM_OPREGION_SIZE,
+	{	/* lowmem to lowlimit */
+		.baseaddr = 0x0,
 		.length   = 0x0,
 		.type     = E820_TYPE_RESERVED
 	},
 
-	/*
-	 * Software SRAM area: base: 0x7f800000, size: 0x800000
-	 * In native, the Software SRAM region should be part of DRAM memory.
-	 * But one fixed Software SRAM gpa is friendly for virtualization due
-	 * to decoupled with various guest memory size.
-	 */
-	{
-		.baseaddr = SOFTWARE_SRAM_BASE_GPA,
-		.length   = SOFTWARE_SRAM_MAX_SIZE,
-		.type	  = E820_TYPE_RESERVED
-	},
-
 	{	/* ECFG_BASE to 4GB */
 		.baseaddr = PCI_EMUL_ECFG_BASE,
 		.length   = (4 * GB) - PCI_EMUL_ECFG_BASE,
@@ -227,23 +206,18 @@ acrn_create_e820_table(struct vmctx *ctx, struct e820_entry *e820)
 	uint32_t removed = 0, k;
 
 	memcpy(e820, e820_default_entries, sizeof(e820_default_entries));
-	if (ctx->lowmem <= e820[LOWRAM_E820_ENTRY + 2].baseaddr) {
-		e820[LOWRAM_E820_ENTRY].length =
-			(ctx->lowmem < e820[LOWRAM_E820_ENTRY+1].baseaddr ? ctx->lowmem :
-			e820[LOWRAM_E820_ENTRY+1].baseaddr) - e820[LOWRAM_E820_ENTRY].baseaddr;
-
-		memmove(&e820[LOWRAM_E820_ENTRY + 2], &e820[LOWRAM_E820_ENTRY + 3],
-				sizeof(struct e820_entry) *
-				(NUM_E820_ENTRIES - (LOWRAM_E820_ENTRY + 3)));
-		removed++;
-	} else {
-		e820[LOWRAM_E820_ENTRY].length = e820[LOWRAM_E820_ENTRY+1].baseaddr -
-			e820[LOWRAM_E820_ENTRY].baseaddr;
 
-		e820[LOWRAM_E820_ENTRY + 2].length =
-			((ctx->lowmem < e820[LOWRAM_E820_ENTRY + 3].baseaddr) ? ctx->lowmem :
-			e820[LOWRAM_E820_ENTRY + 3].baseaddr) - e820[LOWRAM_E820_ENTRY + 2].baseaddr;
+	/* reserve device memory hole for gpu(dsm/opregion) etc */
+	if (gpu_opregion_gpa) {
+		ctx->lowmem_limit = (gpu_opregion_gpa > SOFTWARE_SRAM_BASE_GPA) ?
+			SOFTWARE_SRAM_BASE_GPA : gpu_opregion_gpa;
+	} else {
+		ctx->lowmem_limit = SOFTWARE_SRAM_BASE_GPA;
 	}
+	e820[LOWRAM_E820_ENTRY].length = ctx->lowmem_limit -
+		e820[LOWRAM_E820_ENTRY].baseaddr;
+	e820[LOWRAM_E820_ENTRY+1].baseaddr = ctx->lowmem_limit;
+	e820[LOWRAM_E820_ENTRY+1].length = PCI_EMUL_MEMBASE32 - ctx->lowmem_limit;
 
 	/* remove [5GB, highmem) if it's empty */
 	if (ctx->highmem > 0) {
diff --git a/devicemodel/hw/pci/core.c b/devicemodel/hw/pci/core.c
index 4f15bf6c8..845a449db 100644
--- a/devicemodel/hw/pci/core.c
+++ b/devicemodel/hw/pci/core.c
@@ -1379,7 +1379,7 @@ init_pci(struct vmctx *ctx)
 	uint64_t bus0_memlimit;
 
 	pci_emul_iobase = PCI_EMUL_IOBASE;
-	pci_emul_membase32 = vm_get_lowmem_limit(ctx);
+	pci_emul_membase32 = PCI_EMUL_MEMBASE32;
 	pci_emul_membase64 = PCI_EMUL_MEMBASE64;
 
 	create_gsi_sharing_groups();
diff --git a/devicemodel/hw/pci/passthrough.c b/devicemodel/hw/pci/passthrough.c
index 61701ce63..362a24731 100644
--- a/devicemodel/hw/pci/passthrough.c
+++ b/devicemodel/hw/pci/passthrough.c
@@ -64,10 +64,10 @@
  * [0xDF000000, 0xDF800000) 8M, GOP FB, used OvmfPkg/GvtGopDxe for 1080p@30
  * [0xDFFFD000, 0xDFFFF000) 8K, OpRegion, used by GvtGopDxe and GVT-g
  * [0xDFFFF000, 0XE0000000) 4K, Reserved, not used
- * for TGL GVT-d use:
- * [0x3B800000, 0x3F800000) 64M, Date Stolen Memory
- * [0x3F800000, 0X3F804000] 16K, OpRegion and Extended OpRegion
- * for EHL/WHL/KBL GVT-d use:
+ * for TGL/EHL GVT-d use: identical mapping, same with host layout
+ * [gpu_opregion_hpa, gpu_opregion_hpa+size) 16K, OpRegion and Extended OpRegion
+ * [gpu_dsm_hpa, gpu_dsm_hpa+size] 64M, Date Stolen Memory
+ * for WHL/KBL GVT-d use:
  * [0xDB000000, 0xDF000000) 64M, DSM, used by native GOP and gfx driver
  * [0xDFFFC000, 0xDFFFE000) 8K, OpRegion, used by native GOP and gfx driver
  * [0xDFFFE000, 0XE0000000] 8K, Extended OpRegion, store raw VBT
@@ -86,9 +86,9 @@
  * For OpRegion 2.1+: ASLE.rvda = offset to OpRegion base address
  * For OpRegion 2.0:  ASLE.rvda = physical address, not support currently
  */
-#define GPU_DSM_GPA				0xDB000000
-#define GPU_DSM_SIZE			0x4000000
+#define GPU_DSM_GPA			0xDB000000
 #define GPU_OPREGION_GPA		0xDFFFC000
+#define GPU_DSM_SIZE			0x4000000
 #define GPU_OPREGION_SIZE		0x4000
 /*
  * TODO: Forced DSM/OPREGION size requires native BIOS configuration.
@@ -487,24 +487,6 @@ passthru_gpu_dsm_opregion(struct vmctx *ctx, struct passthru_dev *ptdev,
 
 	switch (device) {
 	case INTEL_ELKHARTLAKE:
-		/* BDSM register has 64 bits.
-		 * bits 63:20 contains the base address of stolen memory
-		 */
-		gpu_dsm_hpa = read_config(ptdev->phys_dev, PCIR_GEN11_BDSM_DW0, 4);
-		dsm_mask_val = gpu_dsm_hpa & ~PCIM_BDSM_MASK;
-		gpu_dsm_hpa &= PCIM_BDSM_MASK;
-		gpu_dsm_hpa |= (uint64_t)read_config(ptdev->phys_dev, PCIR_GEN11_BDSM_DW1, 4) << 32;
-		gpu_dsm_gpa = GPU_DSM_GPA;
-
-		pci_set_cfgdata32(ptdev->dev, PCIR_GEN11_BDSM_DW0, gpu_dsm_gpa | dsm_mask_val);
-		/* write 0 to high 32-bits of BDSM on EHL platform */
-		pci_set_cfgdata32(ptdev->dev, PCIR_GEN11_BDSM_DW1, 0);
-
-		gpu_opregion_gpa = GPU_OPREGION_GPA;
-
-		ptdev->has_virt_pcicfg_regs = &has_virt_pcicfg_regs_on_ehl_gpu;
-		break;
-
 	case INTEL_TIGERLAKE:
 		/* BDSM register has 64 bits.
 		 * bits 63:20 contains the base address of stolen memory
@@ -523,7 +505,7 @@ passthru_gpu_dsm_opregion(struct vmctx *ctx, struct passthru_dev *ptdev,
 		/* write 0 to high 32-bits of BDSM on EHL platform */
 		pci_set_cfgdata32(ptdev->dev, PCIR_GEN11_BDSM_DW1, 0);
 
-		gpu_opregion_gpa = gpu_dsm_gpa + GPU_DSM_SIZE;
+		gpu_opregion_gpa = gpu_dsm_gpa - GPU_OPREGION_SIZE;
 
 		ptdev->has_virt_pcicfg_regs = &has_virt_pcicfg_regs_on_ehl_gpu;
 		break;
diff --git a/devicemodel/include/pci_core.h b/devicemodel/include/pci_core.h
index b6ffb98ca..5038f0533 100644
--- a/devicemodel/include/pci_core.h
+++ b/devicemodel/include/pci_core.h
@@ -49,7 +49,7 @@
 #define	PCI_EMUL_MEMLIMIT64	0x140000000UL	/* 5GB */
 
 #define SOFTWARE_SRAM_MAX_SIZE	0x00800000UL
-#define SOFTWARE_SRAM_BASE_GPA	(PCI_EMUL_MEMBASE32 - SOFTWARE_SRAM_MAX_SIZE)
+#define SOFTWARE_SRAM_BASE_GPA	0x50000000UL
 
 /* Currently,only gvt need reserved bar regions,
  * so just hardcode REGION_NUMS=5 here
diff --git a/devicemodel/include/pcireg.h b/devicemodel/include/pcireg.h
index a9c90f573..0934476be 100644
--- a/devicemodel/include/pcireg.h
+++ b/devicemodel/include/pcireg.h
@@ -1066,7 +1066,7 @@
 #define	PCIM_OSC_CTL_PCIE_CAP_STRUCT	0x10 /* Various Capability Structures */
 
 /* Graphics definitions */
-#define INTEL_ELKHARTLAKE		0x4551
+#define INTEL_ELKHARTLAKE		0x4571
 #define INTEL_TIGERLAKE		0x9a49
 #define PCIR_BDSM			0x5C /* BDSM graphics base data of stolen memory register */
 #define PCIR_GEN11_BDSM_DW0		0xC0
diff --git a/devicemodel/include/sw_load.h b/devicemodel/include/sw_load.h
index f69d2e098..f7e15735d 100644
--- a/devicemodel/include/sw_load.h
+++ b/devicemodel/include/sw_load.h
@@ -39,9 +39,9 @@
 #define E820_TYPE_ACPI_NVS      4U   /* EFI 10 */
 #define E820_TYPE_UNUSABLE      5U   /* EFI 8 */
 
-#define NUM_E820_ENTRIES        9
+#define NUM_E820_ENTRIES        5
 #define LOWRAM_E820_ENTRY       1
-#define HIGHRAM_E820_ENTRY      6
+#define HIGHRAM_E820_ENTRY      4
 
 /* Defines a single entry in an E820 memory map. */
 struct e820_entry {
-- 
2.17.1

