From daf1034d30869b29a4ad8ebc341565da8b2294e0 Mon Sep 17 00:00:00 2001
From: Peng Sun <peng.p.sun@intel.com>
Date: Wed, 10 Mar 2021 14:13:02 +0800
Subject: [PATCH v6] DM: gvt: Identical mapping for GPU DSM on EHL

    Windows graphic driver obtains DSM address from in-BAR mmio register
    which has passthroughed. Not like the other platforms obtained from
    pci configure space register which has virtualized. So EHL has to
    keep identical mapping to avoid trap mmio BAR to do the emulation.

    To keep simple, this patch hardcode the EHL DSM region in vE820
    table, this will cause memory waste here. In the near future, we
    need refine the entire vE820 logic as it is hard to maintained
    due to many reserved regions have introduced in recently.

Signed-off-by: Peng Sun <peng.p.sun@intel.com>
---
 devicemodel/core/sw_load_common.c | 57 +++++++++++--------------------
 devicemodel/core/vmmapi.c         |  2 +-
 devicemodel/hw/pci/passthrough.c  | 42 +++++++++--------------
 devicemodel/include/pcireg.h      |  2 +-
 devicemodel/include/sw_load.h     |  4 +--
 5 files changed, 40 insertions(+), 67 deletions(-)

diff --git a/devicemodel/core/sw_load_common.c b/devicemodel/core/sw_load_common.c
index b6bdd39d4..d831dad59 100644
--- a/devicemodel/core/sw_load_common.c
+++ b/devicemodel/core/sw_load_common.c
@@ -64,10 +64,6 @@ static char bootargs[BOOT_ARG_LEN];
  *
  * FIXME: Do we need to reserve DSM and OPREGION for GVTD here.
  */
-
-#define GPU_DSM_OPREGION_BASE_GPA 0x3B800000
-#define GPU_DSM_OPREGION_SIZE  0x4004000
-
 const struct e820_entry e820_default_entries[NUM_E820_ENTRIES] = {
 	{	/* 0 to video memory */
 		.baseaddr = 0x00000000,
@@ -75,34 +71,22 @@ const struct e820_entry e820_default_entries[NUM_E820_ENTRIES] = {
 		.type     = E820_TYPE_RAM
 	},
 
-	{	/* 1MB to lowmem part1 */
+	{	/* 1MB to lowmem */
 		.baseaddr = 1 * MB,
 		.length   = 0x0,
 		.type     = E820_TYPE_RAM
 	},
 
-	{	/* TGL GPU DSM & OpRegion area */
-		.baseaddr = GPU_DSM_OPREGION_BASE_GPA,
-		.length   = GPU_DSM_OPREGION_SIZE,
-		.type     = E820_TYPE_RESERVED
-	},
-
-	{	/* lowmem part2 to lowmem_limit */
-		.baseaddr = GPU_DSM_OPREGION_BASE_GPA + GPU_DSM_OPREGION_SIZE,
+	{	/* lowmem to lowlimit */
+		.baseaddr = 0x0,
 		.length   = 0x0,
 		.type     = E820_TYPE_RESERVED
 	},
 
-	/*
-	 * Software SRAM area: base: 0x7f800000, size: 0x800000
-	 * In native, the Software SRAM region should be part of DRAM memory.
-	 * But one fixed Software SRAM gpa is friendly for virtualization due
-	 * to decoupled with various guest memory size.
-	 */
-	{
-		.baseaddr = SOFTWARE_SRAM_BASE_GPA,
-		.length   = SOFTWARE_SRAM_MAX_SIZE,
-		.type	  = E820_TYPE_RESERVED
+	{	/* Device quick mem region */
+		.baseaddr = 0x38000000,
+		.length   = 0x48000000,
+		.type     = E820_TYPE_RESERVED
 	},
 
 	{	/* ECFG_BASE to 4GB */
@@ -227,22 +211,19 @@ acrn_create_e820_table(struct vmctx *ctx, struct e820_entry *e820)
 	uint32_t removed = 0, k;
 
 	memcpy(e820, e820_default_entries, sizeof(e820_default_entries));
-	if (ctx->lowmem <= e820[LOWRAM_E820_ENTRY + 2].baseaddr) {
-		e820[LOWRAM_E820_ENTRY].length =
-			(ctx->lowmem < e820[LOWRAM_E820_ENTRY+1].baseaddr ? ctx->lowmem :
-			e820[LOWRAM_E820_ENTRY+1].baseaddr) - e820[LOWRAM_E820_ENTRY].baseaddr;
-
-		memmove(&e820[LOWRAM_E820_ENTRY + 2], &e820[LOWRAM_E820_ENTRY + 3],
-				sizeof(struct e820_entry) *
-				(NUM_E820_ENTRIES - (LOWRAM_E820_ENTRY + 3)));
-		removed++;
+	e820[LOWRAM_E820_ENTRY].length = ctx->lowmem -
+		e820[LOWRAM_E820_ENTRY].baseaddr;
+
+	/* remove [lowmem, lowmem_limit) if it's empty */
+	if (ctx->lowmem_limit > ctx->lowmem) {
+		e820[LOWRAM_E820_ENTRY+1].baseaddr = ctx->lowmem;
+		e820[LOWRAM_E820_ENTRY+1].length =
+			ctx->lowmem_limit - ctx->lowmem;
 	} else {
-		e820[LOWRAM_E820_ENTRY].length = e820[LOWRAM_E820_ENTRY+1].baseaddr -
-			e820[LOWRAM_E820_ENTRY].baseaddr;
-
-		e820[LOWRAM_E820_ENTRY + 2].length =
-			((ctx->lowmem < e820[LOWRAM_E820_ENTRY + 3].baseaddr) ? ctx->lowmem :
-			e820[LOWRAM_E820_ENTRY + 3].baseaddr) - e820[LOWRAM_E820_ENTRY + 2].baseaddr;
+		memmove(&e820[LOWRAM_E820_ENTRY+1], &e820[LOWRAM_E820_ENTRY+2],
+				sizeof(e820[LOWRAM_E820_ENTRY+2]) *
+				(NUM_E820_ENTRIES - (LOWRAM_E820_ENTRY+2)));
+		removed++;
 	}
 
 	/* remove [5GB, highmem) if it's empty */
diff --git a/devicemodel/core/vmmapi.c b/devicemodel/core/vmmapi.c
index c40bab9f4..68b9c0ffd 100644
--- a/devicemodel/core/vmmapi.c
+++ b/devicemodel/core/vmmapi.c
@@ -228,7 +228,7 @@ vm_create(const char *name, uint64_t req_buf, int *vcpu_num)
 
 	ctx->gvt_enabled = false;
 	ctx->fd = devfd;
-	ctx->lowmem_limit = PCI_EMUL_MEMBASE32;
+	ctx->lowmem_limit = 0x38000000; // lowmem_limit to 896MB
 	ctx->highmem_gpa_base = PCI_EMUL_MEMLIMIT64;
 	ctx->name = (char *)(ctx + 1);
 	strncpy(ctx->name, name, strnlen(name, PATH_MAX) + 1);
diff --git a/devicemodel/hw/pci/passthrough.c b/devicemodel/hw/pci/passthrough.c
index 61701ce63..224f3fd05 100644
--- a/devicemodel/hw/pci/passthrough.c
+++ b/devicemodel/hw/pci/passthrough.c
@@ -64,10 +64,16 @@
  * [0xDF000000, 0xDF800000) 8M, GOP FB, used OvmfPkg/GvtGopDxe for 1080p@30
  * [0xDFFFD000, 0xDFFFF000) 8K, OpRegion, used by GvtGopDxe and GVT-g
  * [0xDFFFF000, 0XE0000000) 4K, Reserved, not used
- * for TGL GVT-d use:
- * [0x3B800000, 0x3F800000) 64M, Date Stolen Memory
- * [0x3F800000, 0X3F804000] 16K, OpRegion and Extended OpRegion
- * for EHL/WHL/KBL GVT-d use:
+ * for TGL UEFI BIOS GVT-d use:
+ * [0x3B7FC000, 0x3B800000) 16K, OpRegion and Extended OpRegion 
+ * [0x3B800000, 0X3F800000] 64M, Date Stolen Memory
+ * for EHL UEFI BIOS GVT-d use:
+ * [0x6BFFC000, 0x6C000000) 16K, OpRegion and Extended OpRegion 
+ * [0x6C000000, 0X70000000] 64M, Date Stolen Memory
+ * for EHL SBL BIOS GVT-d use:
+ * [0x7BFFC000, 0x7B000000) 16K, OpRegion and Extended OpRegion 
+ * [0x7C000000, 0X80000000] 64M, Date Stolen Memory
+ * for WHL/KBL GVT-d use:
  * [0xDB000000, 0xDF000000) 64M, DSM, used by native GOP and gfx driver
  * [0xDFFFC000, 0xDFFFE000) 8K, OpRegion, used by native GOP and gfx driver
  * [0xDFFFE000, 0XE0000000] 8K, Extended OpRegion, store raw VBT
@@ -86,9 +92,9 @@
  * For OpRegion 2.1+: ASLE.rvda = offset to OpRegion base address
  * For OpRegion 2.0:  ASLE.rvda = physical address, not support currently
  */
-#define GPU_DSM_GPA				0xDB000000
-#define GPU_DSM_SIZE			0x4000000
+#define GPU_DSM_GPA			0xDB000000
 #define GPU_OPREGION_GPA		0xDFFFC000
+#define GPU_DSM_SIZE			0x4000000
 #define GPU_OPREGION_SIZE		0x4000
 /*
  * TODO: Forced DSM/OPREGION size requires native BIOS configuration.
@@ -487,24 +493,6 @@ passthru_gpu_dsm_opregion(struct vmctx *ctx, struct passthru_dev *ptdev,
 
 	switch (device) {
 	case INTEL_ELKHARTLAKE:
-		/* BDSM register has 64 bits.
-		 * bits 63:20 contains the base address of stolen memory
-		 */
-		gpu_dsm_hpa = read_config(ptdev->phys_dev, PCIR_GEN11_BDSM_DW0, 4);
-		dsm_mask_val = gpu_dsm_hpa & ~PCIM_BDSM_MASK;
-		gpu_dsm_hpa &= PCIM_BDSM_MASK;
-		gpu_dsm_hpa |= (uint64_t)read_config(ptdev->phys_dev, PCIR_GEN11_BDSM_DW1, 4) << 32;
-		gpu_dsm_gpa = GPU_DSM_GPA;
-
-		pci_set_cfgdata32(ptdev->dev, PCIR_GEN11_BDSM_DW0, gpu_dsm_gpa | dsm_mask_val);
-		/* write 0 to high 32-bits of BDSM on EHL platform */
-		pci_set_cfgdata32(ptdev->dev, PCIR_GEN11_BDSM_DW1, 0);
-
-		gpu_opregion_gpa = GPU_OPREGION_GPA;
-
-		ptdev->has_virt_pcicfg_regs = &has_virt_pcicfg_regs_on_ehl_gpu;
-		break;
-
 	case INTEL_TIGERLAKE:
 		/* BDSM register has 64 bits.
 		 * bits 63:20 contains the base address of stolen memory
@@ -523,9 +511,11 @@ passthru_gpu_dsm_opregion(struct vmctx *ctx, struct passthru_dev *ptdev,
 		/* write 0 to high 32-bits of BDSM on EHL platform */
 		pci_set_cfgdata32(ptdev->dev, PCIR_GEN11_BDSM_DW1, 0);
 
-		gpu_opregion_gpa = gpu_dsm_gpa + GPU_DSM_SIZE;
+		gpu_opregion_gpa = gpu_dsm_gpa - GPU_OPREGION_SIZE;
 
 		ptdev->has_virt_pcicfg_regs = &has_virt_pcicfg_regs_on_ehl_gpu;
+		pr_err("[DEBUG]passthru_gpu_dsm_opregion: TGL/EHL: gpu_opregion_gpa=0x%x, gpu_opregion_size=0x%x\n", gpu_opregion_gpa, GPU_OPREGION_SIZE);
+		pr_err("[DEBUG]passthru_gpu_dsm_opregion: TGL/EHL: gpu_dsm_gpa=0x%x, gpu_dsm_size=0x%x\n", gpu_dsm_gpa, GPU_DSM_SIZE);
 		break;
 	/* If on default platforms, such as KBL,WHL  */
 	default:
@@ -540,6 +530,8 @@ passthru_gpu_dsm_opregion(struct vmctx *ctx, struct passthru_dev *ptdev,
 		gpu_opregion_gpa = GPU_OPREGION_GPA;
 
 		ptdev->has_virt_pcicfg_regs = &has_virt_pcicfg_regs_on_def_gpu;
+		pr_err("[DEBUG]passthru_gpu_dsm_opregion: default: gpu_opregion_gpa=0x%x, gpu_opregion_size=0x%x\n", gpu_opregion_gpa, GPU_OPREGION_SIZE);
+		pr_err("[DEBUG]passthru_gpu_dsm_opregion: default: gpu_dsm_gpa=0x%x, gpu_dsm_size=0x%x\n", gpu_dsm_gpa, GPU_DSM_SIZE);
 		break;
 	}
 
diff --git a/devicemodel/include/pcireg.h b/devicemodel/include/pcireg.h
index a9c90f573..0934476be 100644
--- a/devicemodel/include/pcireg.h
+++ b/devicemodel/include/pcireg.h
@@ -1066,7 +1066,7 @@
 #define	PCIM_OSC_CTL_PCIE_CAP_STRUCT	0x10 /* Various Capability Structures */
 
 /* Graphics definitions */
-#define INTEL_ELKHARTLAKE		0x4551
+#define INTEL_ELKHARTLAKE		0x4571
 #define INTEL_TIGERLAKE		0x9a49
 #define PCIR_BDSM			0x5C /* BDSM graphics base data of stolen memory register */
 #define PCIR_GEN11_BDSM_DW0		0xC0
diff --git a/devicemodel/include/sw_load.h b/devicemodel/include/sw_load.h
index f69d2e098..df236135d 100644
--- a/devicemodel/include/sw_load.h
+++ b/devicemodel/include/sw_load.h
@@ -39,9 +39,9 @@
 #define E820_TYPE_ACPI_NVS      4U   /* EFI 10 */
 #define E820_TYPE_UNUSABLE      5U   /* EFI 8 */
 
-#define NUM_E820_ENTRIES        9
+#define NUM_E820_ENTRIES        6
 #define LOWRAM_E820_ENTRY       1
-#define HIGHRAM_E820_ENTRY      6
+#define HIGHRAM_E820_ENTRY      5
 
 /* Defines a single entry in an E820 memory map. */
 struct e820_entry {
-- 
2.25.1

